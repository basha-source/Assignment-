def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    # Divide the array into two halves
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    # Recursively apply merge_sort to each half
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)
    
    # Merge the sorted halves
    return merge(left_sorted, right_sorted)

def merge(left, right):
    sorted_arr = []
    left_ptr, right_ptr = 0, 0
    
    # Merge left and right arrays into sorted_arr
    while left_ptr < len(left) and right_ptr < len(right):
        if left[left_ptr] <= right[right_ptr]:
            sorted_arr.append(left[left_ptr])
            left_ptr += 1
        else:
            sorted_arr.append(right[right_ptr])
            right_ptr += 1
    
    # Append remaining elements
    sorted_arr.extend(left[left_ptr:])
    sorted_arr.extend(right[right_ptr:])
    
    return sorted_arr

# Test cases
arr1 = [31, 23, 35, 27, 11, 21, 15, 28]
arr2 = [22, 34, 25, 36, 43, 67, 52, 13, 65, 17]

sorted_arr1 = merge_sort(arr1)
sorted_arr2 = merge_sort(arr2)

print("Test Case 1:")
print(f"Input: {arr1}")
print(f"Output: {sorted_arr1}")

print("\nTest Case 2:")
print(f"Input: {arr2}")
print(f"Output: {sorted_arr2}")
